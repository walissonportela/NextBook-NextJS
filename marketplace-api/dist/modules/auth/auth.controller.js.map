{"version":3,"sources":["../../../src/modules/auth/auth.controller.ts"],"sourcesContent":["import { Body, Controller, Post } from \"@nestjs/common\";\nimport { LoginDto } from \"./commands/dto/login.dto\";\nimport { Public } from \"./decorators/public.decorator\";\nimport { CommandBus } from \"@nestjs/cqrs\";\nimport { ApiOperation, ApiResponse } from \"@nestjs/swagger\";\nimport { LoginCommand } from \"./commands/impl/login.command\";\nimport { RegisterDto } from \"./commands/dto/register.dto\";\nimport { RegisterCommand } from \"./commands/impl/register.command\";\n\n@Controller('auth')\nexport class AuthController {\n\n  constructor(private readonly commandBus: CommandBus) { }\n\n  @ApiOperation({ summary: 'Login a user' })\n  @ApiResponse({\n    status: 201, example: {\n      user: {\n        id: '1',\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n        role: 'admin'\n      },\n      accessToken: 'token jwt'\n    }\n  })\n  @ApiResponse({\n    status: 401, example: {\n      message: 'Invalid credentials',\n      statusCode: 401\n    }\n  })\n  @Post('login')\n  @Public()\n  async login(@Body() loginDto: LoginDto) {\n    return this.commandBus.execute(new LoginCommand(loginDto))\n  }\n\n  @ApiOperation({ summary: 'Register a user' })\n  @ApiResponse({\n    status: 201, example: {\n      user: {\n        id: '1',\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n        role: 'admin',\n        phone: '1234567890',\n        cpf: '1234567890'\n      },\n      accessToken: 'token jwt'\n    }\n  })\n  @ApiResponse({\n    status: 409, example: {\n      message: 'User already exists',\n      statusCode: 409\n    }\n  })\n  @Post('register')\n  @Public()\n  async register(@Body() registerDto: RegisterDto) {\n    return this.commandBus.execute(new RegisterCommand(registerDto))\n  }\n}"],"names":["AuthController","login","loginDto","commandBus","execute","LoginCommand","register","registerDto","RegisterCommand","summary","status","example","user","id","name","email","role","accessToken","message","statusCode","phone","cpf"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAV0B;0BACd;iCACF;sBACI;yBACe;8BACb;6BACD;iCACI;;;;;;;;;;;;;;;AAGzB,IAAA,AAAMA,iBAAN,MAAMA;IAIX,MAoBMC,MAAM,AAAQC,QAAkB,EAAE;QACtC,OAAO,IAAI,CAACC,UAAU,CAACC,OAAO,CAAC,IAAIC,0BAAY,CAACH;IAClD;IAEA,MAsBMI,SAAS,AAAQC,WAAwB,EAAE;QAC/C,OAAO,IAAI,CAACJ,UAAU,CAACC,OAAO,CAAC,IAAII,gCAAe,CAACD;IACrD;IAlDA,YAAY,AAAiBJ,UAAsB,CAAE;aAAxBA,aAAAA;IAA0B;AAmDzD;;;QAjDkBM,SAAS;;;QAEvBC,QAAQ;QAAKC,SAAS;YACpBC,MAAM;gBACJC,IAAI;gBACJC,MAAM;gBACNC,OAAO;gBACPC,MAAM;YACR;YACAC,aAAa;QACf;;;QAGAP,QAAQ;QAAKC,SAAS;YACpBO,SAAS;YACTC,YAAY;QACd;;;;;;;;;;;;;QAQcV,SAAS;;;QAEvBC,QAAQ;QAAKC,SAAS;YACpBC,MAAM;gBACJC,IAAI;gBACJC,MAAM;gBACNC,OAAO;gBACPC,MAAM;gBACNI,OAAO;gBACPC,KAAK;YACP;YACAJ,aAAa;QACf;;;QAGAP,QAAQ;QAAKC,SAAS;YACpBO,SAAS;YACTC,YAAY;QACd"}