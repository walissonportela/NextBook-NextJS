{"version":3,"sources":["../../../../../src/modules/auth/commands/handler/register.handler.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from \"@nestjs/cqrs\";\nimport { PrismaService } from \"src/core/infra/database/prisma.service\";\nimport { RegisterCommand } from \"../impl/register.command\";\nimport { ConflictException } from \"@nestjs/common\";\nimport { hash } from \"bcryptjs\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { Role } from \"@prisma/client\";\n\n@CommandHandler(RegisterCommand)\nexport class RegisterHandler implements ICommandHandler<RegisterCommand> {\n    constructor(\n        private readonly prismaService: PrismaService,\n        private readonly jwtService: JwtService\n    ) { }\n    async execute(command: RegisterCommand) {\n        const { name, email, password, phone, cpf } = command.data\n\n        const user = await this.prismaService.user.findUnique({\n            where: {\n                email,\n            }\n        });\n\n        if (user) {\n            throw new ConflictException('User already exists')\n        }\n\n        const hashedPassword = await hash(password, 10);\n\n        const userWithCpf = await this.prismaService.user.findUnique({\n            where: {\n                cpf\n            }\n        });\n\n        if (userWithCpf) {\n            throw new ConflictException('User with cpf already exists')\n        }\n\n        const userCreated = await this.prismaService.user.create({\n            data: {\n                name,\n                email,\n                password: hashedPassword,\n                role: Role.USER,\n                phone,\n                cpf\n            }\n        });\n\n        await this.prismaService.cart.create({\n            data: {\n                userId: userCreated.id\n            }\n        })\n\n        const payload = {\n            sub: userCreated.id,\n            email: userCreated.email,\n            role: userCreated.role\n        };\n\n        const accessToken = await this.jwtService.signAsync(payload);\n\n        return {\n            user: {\n                id: userCreated.id,\n                name: userCreated.name,\n                email: userCreated.email,\n                phone: userCreated.phone,\n                cpf: userCreated.cpf,\n                role: userCreated.role\n            }, accessToken\n        }\n    }\n}"],"names":["RegisterHandler","execute","command","name","email","password","phone","cpf","data","user","prismaService","findUnique","where","ConflictException","hashedPassword","hash","userWithCpf","userCreated","create","role","Role","USER","cart","userId","id","payload","sub","accessToken","jwtService","signAsync"],"mappings":";;;;+BASaA;;;eAAAA;;;sBATmC;+BAClB;iCACE;wBACE;0BACb;qBACM;wBACN;;;;;;;;;;AAGd,IAAA,AAAMA,kBAAN,MAAMA;IAKT,MAAMC,QAAQC,OAAwB,EAAE;QACpC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,GAAG,EAAE,GAAGL,QAAQM,IAAI;QAE1D,MAAMC,OAAO,MAAM,IAAI,CAACC,aAAa,CAACD,IAAI,CAACE,UAAU,CAAC;YAClDC,OAAO;gBACHR;YACJ;QACJ;QAEA,IAAIK,MAAM;YACN,MAAM,IAAII,yBAAiB,CAAC;QAChC;QAEA,MAAMC,iBAAiB,MAAMC,IAAAA,cAAI,EAACV,UAAU;QAE5C,MAAMW,cAAc,MAAM,IAAI,CAACN,aAAa,CAACD,IAAI,CAACE,UAAU,CAAC;YACzDC,OAAO;gBACHL;YACJ;QACJ;QAEA,IAAIS,aAAa;YACb,MAAM,IAAIH,yBAAiB,CAAC;QAChC;QAEA,MAAMI,cAAc,MAAM,IAAI,CAACP,aAAa,CAACD,IAAI,CAACS,MAAM,CAAC;YACrDV,MAAM;gBACFL;gBACAC;gBACAC,UAAUS;gBACVK,MAAMC,YAAI,CAACC,IAAI;gBACff;gBACAC;YACJ;QACJ;QAEA,MAAM,IAAI,CAACG,aAAa,CAACY,IAAI,CAACJ,MAAM,CAAC;YACjCV,MAAM;gBACFe,QAAQN,YAAYO,EAAE;YAC1B;QACJ;QAEA,MAAMC,UAAU;YACZC,KAAKT,YAAYO,EAAE;YACnBpB,OAAOa,YAAYb,KAAK;YACxBe,MAAMF,YAAYE,IAAI;QAC1B;QAEA,MAAMQ,cAAc,MAAM,IAAI,CAACC,UAAU,CAACC,SAAS,CAACJ;QAEpD,OAAO;YACHhB,MAAM;gBACFe,IAAIP,YAAYO,EAAE;gBAClBrB,MAAMc,YAAYd,IAAI;gBACtBC,OAAOa,YAAYb,KAAK;gBACxBE,OAAOW,YAAYX,KAAK;gBACxBC,KAAKU,YAAYV,GAAG;gBACpBY,MAAMF,YAAYE,IAAI;YAC1B;YAAGQ;QACP;IACJ;IAhEA,YACI,AAAiBjB,aAA4B,EAC7C,AAAiBkB,UAAsB,CACzC;aAFmBlB,gBAAAA;aACAkB,aAAAA;IACjB;AA8DR"}