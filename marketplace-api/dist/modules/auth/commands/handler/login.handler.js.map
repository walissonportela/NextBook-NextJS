{"version":3,"sources":["../../../../../src/modules/auth/commands/handler/login.handler.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from \"@nestjs/cqrs\";\nimport { LoginCommand } from \"../impl/login.command\";\nimport { PrismaService } from \"src/core/infra/database/prisma.service\";\nimport { NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { compare } from \"bcryptjs\";\nimport { JwtService } from \"@nestjs/jwt\";\n\n@CommandHandler(LoginCommand)\nexport class LoginHandler implements ICommandHandler<LoginCommand> {\n    constructor(\n        private readonly prismaService: PrismaService,\n        private readonly jwtService: JwtService\n    ) { }\nasync execute(command: LoginCommand) {\n    const { email, password } = command.data\n\n    const user = await this.prismaService.user.findUnique({\n        where: { email }\n    })\n\n    if (!user) {\n        throw new UnauthorizedException('Invalid credentials')\n    }\n\n    const isPasswordValid = await compare(password, user.password)\n\n    if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid credentials')\n    }\n\n    const payload = {\n        sub: user.id,\n        email: user.email,\n        name: user.name, \n        role: user.role\n    }\n\n    const accessToken = await this.jwtService.signAsync(payload)\n\n    return {\n        user: {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            role: user.role,\n            phone: user.phone,\n            cpf: user.cpf\n        },\n        accessToken\n    }\n}\n}"],"names":["LoginHandler","execute","command","email","password","data","user","prismaService","findUnique","where","UnauthorizedException","isPasswordValid","compare","payload","sub","id","name","role","accessToken","jwtService","signAsync","phone","cpf"],"mappings":";;;;+BAQaA;;;eAAAA;;;sBARmC;8BACnB;+BACC;wBAC2B;0BACjC;qBACG;;;;;;;;;;AAGpB,IAAA,AAAMA,eAAN,MAAMA;IAKb,MAAMC,QAAQC,OAAqB,EAAE;QACjC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGF,QAAQG,IAAI;QAExC,MAAMC,OAAO,MAAM,IAAI,CAACC,aAAa,CAACD,IAAI,CAACE,UAAU,CAAC;YAClDC,OAAO;gBAAEN;YAAM;QACnB;QAEA,IAAI,CAACG,MAAM;YACP,MAAM,IAAII,6BAAqB,CAAC;QACpC;QAEA,MAAMC,kBAAkB,MAAMC,IAAAA,iBAAO,EAACR,UAAUE,KAAKF,QAAQ;QAE7D,IAAI,CAACO,iBAAiB;YAClB,MAAM,IAAID,6BAAqB,CAAC;QACpC;QAEA,MAAMG,UAAU;YACZC,KAAKR,KAAKS,EAAE;YACZZ,OAAOG,KAAKH,KAAK;YACjBa,MAAMV,KAAKU,IAAI;YACfC,MAAMX,KAAKW,IAAI;QACnB;QAEA,MAAMC,cAAc,MAAM,IAAI,CAACC,UAAU,CAACC,SAAS,CAACP;QAEpD,OAAO;YACHP,MAAM;gBACFS,IAAIT,KAAKS,EAAE;gBACXC,MAAMV,KAAKU,IAAI;gBACfb,OAAOG,KAAKH,KAAK;gBACjBc,MAAMX,KAAKW,IAAI;gBACfI,OAAOf,KAAKe,KAAK;gBACjBC,KAAKhB,KAAKgB,GAAG;YACjB;YACAJ;QACJ;IACJ;IAzCI,YACI,AAAiBX,aAA4B,EAC7C,AAAiBY,UAAsB,CACzC;aAFmBZ,gBAAAA;aACAY,aAAAA;IACjB;AAuCR"}