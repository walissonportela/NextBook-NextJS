{"version":3,"sources":["../../../src/modules/product/product.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Put, Delete, Query, Body, Param, UploadedFile, UseInterceptors, BadRequestException } from \"@nestjs/common\";\nimport { QueryBus, CommandBus } from \"@nestjs/cqrs\";\nimport { GetProductsDto } from \"./queries/dto/get-products.dto\";\nimport { GetProductsQuery } from \"./queries/impl/get-products.query\";\nimport { GetProductByIdQuery } from \"./queries/impl/get-product-by-id.query\";\nimport { CreateProductCommand } from \"./commands/impl/create-product.command\";\nimport { UpdateProductCommand } from \"./commands/impl/update-product.command\";\nimport { DeleteProductCommand } from \"./commands/impl/delete-product.command\";\nimport { CreateProductDto } from \"./commands/dto/create-product.dto\";\nimport { UpdateProductDtoWithoutId } from \"./commands/dto/update-product.dto\";\nimport { ApiOperation, ApiResponse, ApiTags, ApiBearerAuth, ApiConsumes, ApiBody } from \"@nestjs/swagger\";\nimport { Public } from \"../auth/decorators/public.decorator\";\nimport { Roles } from \"../../core/decorators/roles.decorator\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\n\n@ApiTags('Products')\n@Controller('products')\nexport class ProductController {\n  constructor(\n    private readonly queryBus: QueryBus,\n    private readonly commandBus: CommandBus\n  ) { }\n\n  @Get()\n  @ApiOperation({ summary: 'Get products with pagination and filters' })\n  @ApiResponse({\n    status: 200, example: {\n      page: 1,\n      limit: 10,\n      total: 100,\n      products: []\n    }\n  })\n  @Public()\n  async getProducts(@Query() query: GetProductsDto) {\n    return this.queryBus.execute(new GetProductsQuery({\n      ...query,\n      price: query.price ? Number(query.price) : undefined\n    }));\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get product by ID' })\n  @ApiResponse({ status: 200, example: {\n    id: '1',\n    name: 'iPhone 15',\n    description: 'Latest iPhone with advanced features',\n    imageUrl: `${process.env.BASE_URL}/image.jpg`,\n    price: 999.99\n  } })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  @Public()\n  async getProductById(@Param('id') id: string) {\n    return this.queryBus.execute(new GetProductByIdQuery({ id }));\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new product (Admin only)' })\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiResponse({\n    status: 201, example: {\n      id: '1',\n      name: 'iPhone 15',\n      description: 'Latest iPhone with advanced features',\n      imageUrl: `${process.env.BASE_URL}/image.jpg`,\n      price: 999.99\n    }\n  })\n  @ApiResponse({\n    status: 401, example: {\n      message: 'Unauthorized',\n      statusCode: 401\n    }\n  })\n  @ApiResponse({\n    status: 403, example: {\n      message: 'Forbidden - Admin role required',\n      statusCode: 403\n    }\n  })\n  @ApiBearerAuth()\n  @Roles(['ADMIN'])\n  async createProduct(\n    @UploadedFile() image: Express.Multer.File,\n    @Body() createProductDto: CreateProductDto\n  ) {\n    return this.commandBus.execute(new CreateProductCommand({\n      ...createProductDto,\n      price: Number(createProductDto.price),\n      imageUrl: image.filename\n    }));\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update a product (Admin only)' })\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiResponse({ status: 200, example: {\n    id: '1',\n    name: 'iPhone 15',\n    description: 'Latest iPhone with advanced features',\n    imageUrl: `${process.env.BASE_URL}/image.jpg`,\n    price: 999.99\n  } })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin role required' })\n  @ApiBearerAuth()\n  @Roles(['ADMIN'])\n  async updateProduct(\n    @Param('id') id: string,\n    @Body() updateProductDto: UpdateProductDtoWithoutId,\n    @UploadedFile() image: Express.Multer.File,\n  ) {\n    return this.commandBus.execute(new UpdateProductCommand({\n      id,\n      price: updateProductDto.price ? Number(updateProductDto.price) : undefined,\n      imageUrl: image ? image.filename : undefined,\n      description: updateProductDto.description ? updateProductDto.description : undefined,\n      name: updateProductDto.name ? updateProductDto.name : undefined\n    }));\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a product (Admin only)' })\n  @ApiResponse({ status: 200, example: {\n    message: 'Product deleted successfully',\n    product: {\n      id: '1',\n      name: 'iPhone 15',\n      description: 'Latest iPhone with advanced features',\n      imageUrl: `${process.env.BASE_URL}/image.jpg`,\n      price: 999.99\n    }\n  } })\n  @ApiResponse({ status: 404, description: 'Product not found' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({ status: 403, description: 'Forbidden - Admin role required' })\n  @ApiBearerAuth()\n  @Roles(['ADMIN'])\n  async deleteProduct(@Param('id') id: string) {\n    return this.commandBus.execute(new DeleteProductCommand({ id }));\n  }\n}"],"names":["ProductController","getProducts","query","queryBus","execute","GetProductsQuery","price","Number","undefined","getProductById","id","GetProductByIdQuery","createProduct","image","createProductDto","commandBus","CreateProductCommand","imageUrl","filename","updateProduct","updateProductDto","UpdateProductCommand","description","name","deleteProduct","DeleteProductCommand","summary","status","example","page","limit","total","products","process","env","BASE_URL","message","statusCode","product"],"mappings":"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"}