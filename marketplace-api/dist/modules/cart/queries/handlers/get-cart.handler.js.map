{"version":3,"sources":["../../../../../src/modules/cart/queries/handlers/get-cart.handler.ts"],"sourcesContent":["import { QueryHandler, IQueryHandler } from \"@nestjs/cqrs\";\nimport { PrismaService } from \"src/core/infra/database/prisma.service\";\nimport { NotFoundException } from \"@nestjs/common\";\nimport { GetCartQuery } from \"../get-cart.query\";\nimport { FileService } from \"src/core/infra/multer/file.service\";\n\n@QueryHandler(GetCartQuery)\nexport class GetCartHandler implements IQueryHandler<GetCartQuery> {\n    constructor(\n        private readonly prismaService: PrismaService, \n        private readonly fileService: FileService\n    ) {}\n\n    async execute(query: GetCartQuery) {\n        const { userId } = query;\n\n        const cart = await this.prismaService.cart.findUnique({\n            where: {\n                userId\n            },\n            include: {\n                products: {\n                    include: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!cart) {\n            throw new NotFoundException('Cart not found');\n        }\n\n        let totalPrice = 0;\n        const cartItems = cart.products.map(item => {\n            const itemTotal = item.product.price * item.quantity;\n            totalPrice += itemTotal;\n\n            return {\n                product: {\n                    ...item.product,\n                    imageUrl: this.fileService.getFileUrl(item.product.imageUrl)\n                },\n                quantity: item.quantity,\n                itemTotal: itemTotal\n            };\n        });\n\n        return {\n            cartId: cart.id,\n            userId: cart.userId,\n            items: cartItems,\n            totalItems: cartItems.length,\n            totalPrice: totalPrice,\n            createdAt: cart.createdAt,\n            updatedAt: cart.updatedAt\n        };\n    }\n}\n"],"names":["GetCartHandler","execute","query","userId","cart","prismaService","findUnique","where","include","products","product","NotFoundException","totalPrice","cartItems","map","item","itemTotal","price","quantity","imageUrl","fileService","getFileUrl","cartId","id","items","totalItems","length","createdAt","updatedAt"],"mappings":";;;;+BAOaA;;;eAAAA;;;sBAP+B;+BACd;wBACI;8BACL;6BACD;;;;;;;;;;AAGrB,IAAA,AAAMA,iBAAN,MAAMA;IAMT,MAAMC,QAAQC,KAAmB,EAAE;QAC/B,MAAM,EAAEC,MAAM,EAAE,GAAGD;QAEnB,MAAME,OAAO,MAAM,IAAI,CAACC,aAAa,CAACD,IAAI,CAACE,UAAU,CAAC;YAClDC,OAAO;gBACHJ;YACJ;YACAK,SAAS;gBACLC,UAAU;oBACND,SAAS;wBACLE,SAAS;oBACb;gBACJ;YACJ;QACJ;QAEA,IAAI,CAACN,MAAM;YACP,MAAM,IAAIO,yBAAiB,CAAC;QAChC;QAEA,IAAIC,aAAa;QACjB,MAAMC,YAAYT,KAAKK,QAAQ,CAACK,GAAG,CAACC,CAAAA;YAChC,MAAMC,YAAYD,KAAKL,OAAO,CAACO,KAAK,GAAGF,KAAKG,QAAQ;YACpDN,cAAcI;YAEd,OAAO;gBACHN,SAAS;oBACL,GAAGK,KAAKL,OAAO;oBACfS,UAAU,IAAI,CAACC,WAAW,CAACC,UAAU,CAACN,KAAKL,OAAO,CAACS,QAAQ;gBAC/D;gBACAD,UAAUH,KAAKG,QAAQ;gBACvBF,WAAWA;YACf;QACJ;QAEA,OAAO;YACHM,QAAQlB,KAAKmB,EAAE;YACfpB,QAAQC,KAAKD,MAAM;YACnBqB,OAAOX;YACPY,YAAYZ,UAAUa,MAAM;YAC5Bd,YAAYA;YACZe,WAAWvB,KAAKuB,SAAS;YACzBC,WAAWxB,KAAKwB,SAAS;QAC7B;IACJ;IAjDA,YACI,AAAiBvB,aAA4B,EAC7C,AAAiBe,WAAwB,CAC3C;aAFmBf,gBAAAA;aACAe,cAAAA;IAClB;AA+CP"}