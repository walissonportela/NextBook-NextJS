{"version":3,"sources":["../../../../../src/modules/cart/commands/handler/add-product-to-cart.handler.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from \"@nestjs/cqrs\";\nimport { AddProductToCartImpl } from \"../impl/add-product-to-cart.impl\";\nimport { PrismaService } from \"src/core/infra/database/prisma.service\";\nimport { BadRequestException, NotFoundException } from \"@nestjs/common\";\nimport console from \"console\";\n\n@CommandHandler(AddProductToCartImpl)\nexport class AddProductToCartHandler implements ICommandHandler<AddProductToCartImpl> {\n    constructor(private readonly prismaService: PrismaService) {}\n\n    async execute(command: AddProductToCartImpl) {\n        const { productId, quantity, userId } = command.data;\n\n        const cart = await this.prismaService.cart.findUnique({\n            where: {\n                userId\n            },\n            include: {\n                products: {\n                    select: {\n                        product: true\n                    }\n                }\n            }\n        });\n\n        if (!cart) {\n            throw new NotFoundException('Cart not found');\n        }\n\n        const productInCart = await this.prismaService.productInCart.findFirst({\n            where: {\n                productId,\n                cartId: cart.id\n            }\n        });\n        \n        let updatedProductInCart;\n\n        if (productInCart) {\n            updatedProductInCart = await this.prismaService.productInCart.update({\n                where: {\n                    productId_cartId: {\n                        productId,\n                        cartId: cart.id\n                    }\n                },\n                data: {\n                    quantity: productInCart.quantity + quantity\n                },\n                include: {\n                    product: true\n                }\n            });\n        } else {\n            updatedProductInCart = await this.prismaService.productInCart.create({\n                data: {\n                    productId,\n                    cartId: cart.id,\n                    quantity\n                },\n                include: {\n                    product: true\n                }\n            });\n        }\n\n        return {\n            product: updatedProductInCart.product,\n            quantity: updatedProductInCart.quantity\n        };\n    }\n}"],"names":["AddProductToCartHandler","execute","command","productId","quantity","userId","data","cart","prismaService","findUnique","where","include","products","select","product","NotFoundException","productInCart","findFirst","cartId","id","updatedProductInCart","update","productId_cartId","create"],"mappings":";;;;+BAOaA;;;eAAAA;;;sBAPmC;sCACX;+BACP;wBACyB;;;;;;;;;;AAIhD,IAAA,AAAMA,0BAAN,MAAMA;IAGT,MAAMC,QAAQC,OAA6B,EAAE;QACzC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAE,GAAGH,QAAQI,IAAI;QAEpD,MAAMC,OAAO,MAAM,IAAI,CAACC,aAAa,CAACD,IAAI,CAACE,UAAU,CAAC;YAClDC,OAAO;gBACHL;YACJ;YACAM,SAAS;gBACLC,UAAU;oBACNC,QAAQ;wBACJC,SAAS;oBACb;gBACJ;YACJ;QACJ;QAEA,IAAI,CAACP,MAAM;YACP,MAAM,IAAIQ,yBAAiB,CAAC;QAChC;QAEA,MAAMC,gBAAgB,MAAM,IAAI,CAACR,aAAa,CAACQ,aAAa,CAACC,SAAS,CAAC;YACnEP,OAAO;gBACHP;gBACAe,QAAQX,KAAKY,EAAE;YACnB;QACJ;QAEA,IAAIC;QAEJ,IAAIJ,eAAe;YACfI,uBAAuB,MAAM,IAAI,CAACZ,aAAa,CAACQ,aAAa,CAACK,MAAM,CAAC;gBACjEX,OAAO;oBACHY,kBAAkB;wBACdnB;wBACAe,QAAQX,KAAKY,EAAE;oBACnB;gBACJ;gBACAb,MAAM;oBACFF,UAAUY,cAAcZ,QAAQ,GAAGA;gBACvC;gBACAO,SAAS;oBACLG,SAAS;gBACb;YACJ;QACJ,OAAO;YACHM,uBAAuB,MAAM,IAAI,CAACZ,aAAa,CAACQ,aAAa,CAACO,MAAM,CAAC;gBACjEjB,MAAM;oBACFH;oBACAe,QAAQX,KAAKY,EAAE;oBACff;gBACJ;gBACAO,SAAS;oBACLG,SAAS;gBACb;YACJ;QACJ;QAEA,OAAO;YACHA,SAASM,qBAAqBN,OAAO;YACrCV,UAAUgB,qBAAqBhB,QAAQ;QAC3C;IACJ;IA/DA,YAAY,AAAiBI,aAA4B,CAAE;aAA9BA,gBAAAA;IAA+B;AAgEhE"}